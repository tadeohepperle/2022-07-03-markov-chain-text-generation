let scaleMarkovModelToTextLength,buildMarkovModels,generateTextFromMarkovModels,buildMarkovModel,tokenizeText,generateSentenceFromMarkovModels,fs;_0df‍.w("./functions.js",[["scaleMarkovModelToTextLength",["scaleMarkovModelToTextLength"],function(v){scaleMarkovModelToTextLength=v}],["buildMarkovModels",["buildMarkovModels"],function(v){buildMarkovModels=v}],["generateTextFromMarkovModels",["generateTextFromMarkovModels"],function(v){generateTextFromMarkovModels=v}],["buildMarkovModel",["buildMarkovModel"],function(v){buildMarkovModel=v}],["tokenizeText",["tokenizeText"],function(v){tokenizeText=v}],["generateSentenceFromMarkovModels",["generateSentenceFromMarkovModels"],function(v){generateSentenceFromMarkovModels=v}]]);_0df‍.w("fs",[["default",["fs"],function(v){fs=v}]]);










async function main() {
  let textFiles = ["bible", "fiftyshades", "harrypotter", "quran"];
  let texts = textFiles.map((e) => fs.readFileSync(`./data/${e}.txt`, "utf-8"));

  let textModels = texts.map((e) => buildMarkovModels(e));

  textModels = textModels.map((e, i) =>
    e.map((ee) => scaleMarkovModelToTextLength(ee, texts[i].length))
  );

  for (let i in textFiles) {
    fs.writeFileSync(
      `./data/models/${textFiles[i]}.json`,
      JSON.stringify(textModels[i]),
      "utf-8"
    );
  }
}

async function main2() {
  let harrymodels = JSON.parse(
    fs.readFileSync(`./data/models/harrypotter.json`)
  );
  let text = generateSentenceFromMarkovModels(harrymodels, 100);
  _0df‍.g.console.log(text);
}

main2();
